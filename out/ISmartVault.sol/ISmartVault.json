{"abi":[{"type":"function","name":"allowance","inputs":[{"name":"owner","type":"address","internalType":"address"},{"name":"spender","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"approve","inputs":[{"name":"spender","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"assetGroupId","inputs":[],"outputs":[{"name":"id","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"balanceOf","inputs":[{"name":"account","type":"address","internalType":"address"},{"name":"id","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"balanceOf","inputs":[{"name":"account","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"balanceOfBatch","inputs":[{"name":"accounts","type":"address[]","internalType":"address[]"},{"name":"ids","type":"uint256[]","internalType":"uint256[]"}],"outputs":[{"name":"","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"view"},{"type":"function","name":"balanceOfFractional","inputs":[{"name":"account","type":"address","internalType":"address"},{"name":"id","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"fractionalBalance","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"balanceOfFractionalBatch","inputs":[{"name":"account","type":"address","internalType":"address"},{"name":"ids","type":"uint256[]","internalType":"uint256[]"}],"outputs":[{"name":"fractionalBalances","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"view"},{"type":"function","name":"burnNFTs","inputs":[{"name":"owner","type":"address","internalType":"address"},{"name":"nftIds","type":"uint256[]","internalType":"uint256[]"},{"name":"nftAmounts","type":"uint256[]","internalType":"uint256[]"}],"outputs":[{"name":"metadata","type":"bytes[]","internalType":"bytes[]"}],"stateMutability":"nonpayable"},{"type":"function","name":"burnVaultShares","inputs":[{"name":"owner","type":"address","internalType":"address"},{"name":"vaultShares","type":"uint256","internalType":"uint256"},{"name":"strategies","type":"address[]","internalType":"address[]"},{"name":"shares","type":"uint256[]","internalType":"uint256[]"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"claimShares","inputs":[{"name":"claimer","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"getMetadata","inputs":[{"name":"nftIds","type":"uint256[]","internalType":"uint256[]"}],"outputs":[{"name":"metadata","type":"bytes[]","internalType":"bytes[]"}],"stateMutability":"view"},{"type":"function","name":"isApprovedForAll","inputs":[{"name":"account","type":"address","internalType":"address"},{"name":"operator","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"mintDepositNFT","inputs":[{"name":"receiver","type":"address","internalType":"address"},{"name":"metadata","type":"tuple","internalType":"struct DepositMetadata","components":[{"name":"assets","type":"uint256[]","internalType":"uint256[]"},{"name":"initiated","type":"uint256","internalType":"uint256"},{"name":"flushIndex","type":"uint256","internalType":"uint256"}]}],"outputs":[{"name":"id","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"mintVaultShares","inputs":[{"name":"receiver","type":"address","internalType":"address"},{"name":"vaultShares","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"mintWithdrawalNFT","inputs":[{"name":"receiver","type":"address","internalType":"address"},{"name":"metadata","type":"tuple","internalType":"struct WithdrawalMetadata","components":[{"name":"vaultShares","type":"uint256","internalType":"uint256"},{"name":"flushIndex","type":"uint256","internalType":"uint256"}]}],"outputs":[{"name":"id","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"safeBatchTransferFrom","inputs":[{"name":"from","type":"address","internalType":"address"},{"name":"to","type":"address","internalType":"address"},{"name":"ids","type":"uint256[]","internalType":"uint256[]"},{"name":"amounts","type":"uint256[]","internalType":"uint256[]"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"safeTransferFrom","inputs":[{"name":"from","type":"address","internalType":"address"},{"name":"to","type":"address","internalType":"address"},{"name":"id","type":"uint256","internalType":"uint256"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setApprovalForAll","inputs":[{"name":"operator","type":"address","internalType":"address"},{"name":"approved","type":"bool","internalType":"bool"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setBaseURI","inputs":[{"name":"uri_","type":"string","internalType":"string"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"supportsInterface","inputs":[{"name":"interfaceId","type":"bytes4","internalType":"bytes4"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"totalSupply","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"transfer","inputs":[{"name":"to","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"transferFrom","inputs":[{"name":"from","type":"address","internalType":"address"},{"name":"to","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"transferFromSpender","inputs":[{"name":"from","type":"address","internalType":"address"},{"name":"to","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"success","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"uri","inputs":[{"name":"id","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"function","name":"vaultName","inputs":[],"outputs":[{"name":"name","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"event","name":"Approval","inputs":[{"name":"owner","type":"address","indexed":true,"internalType":"address"},{"name":"spender","type":"address","indexed":true,"internalType":"address"},{"name":"value","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"ApprovalForAll","inputs":[{"name":"account","type":"address","indexed":true,"internalType":"address"},{"name":"operator","type":"address","indexed":true,"internalType":"address"},{"name":"approved","type":"bool","indexed":false,"internalType":"bool"}],"anonymous":false},{"type":"event","name":"BaseURIChanged","inputs":[{"name":"baseUri","type":"string","indexed":false,"internalType":"string"}],"anonymous":false},{"type":"event","name":"Transfer","inputs":[{"name":"from","type":"address","indexed":true,"internalType":"address"},{"name":"to","type":"address","indexed":true,"internalType":"address"},{"name":"value","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"TransferBatch","inputs":[{"name":"operator","type":"address","indexed":true,"internalType":"address"},{"name":"from","type":"address","indexed":true,"internalType":"address"},{"name":"to","type":"address","indexed":true,"internalType":"address"},{"name":"ids","type":"uint256[]","indexed":false,"internalType":"uint256[]"},{"name":"values","type":"uint256[]","indexed":false,"internalType":"uint256[]"}],"anonymous":false},{"type":"event","name":"TransferSingle","inputs":[{"name":"operator","type":"address","indexed":true,"internalType":"address"},{"name":"from","type":"address","indexed":true,"internalType":"address"},{"name":"to","type":"address","indexed":true,"internalType":"address"},{"name":"id","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"value","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"URI","inputs":[{"name":"value","type":"string","indexed":false,"internalType":"string"},{"name":"id","type":"uint256","indexed":true,"internalType":"uint256"}],"anonymous":false}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","assetGroupId()":"84ba89e3","balanceOf(address)":"70a08231","balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","balanceOfFractional(address,uint256)":"5d9c84ee","balanceOfFractionalBatch(address,uint256[])":"539183e7","burnNFTs(address,uint256[],uint256[])":"a99fb771","burnVaultShares(address,uint256,address[],uint256[])":"e2281e0a","claimShares(address,uint256)":"2ce5183f","getMetadata(uint256[])":"a7614d81","isApprovedForAll(address,address)":"e985e9c5","mintDepositNFT(address,(uint256[],uint256,uint256))":"b4316087","mintVaultShares(address,uint256)":"f20046a8","mintWithdrawalNFT(address,(uint256,uint256))":"56ba9454","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","setApprovalForAll(address,bool)":"a22cb465","setBaseURI(string)":"55f804b3","supportsInterface(bytes4)":"01ffc9a7","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd","transferFromSpender(address,address,uint256)":"2acf4637","uri(uint256)":"0e89341c","vaultName()":"0ace9ca0"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseUri\",\"type\":\"string\"}],\"name\":\"BaseURIChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetGroupId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOfFractional\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fractionalBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfFractionalBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"fractionalBalances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"nftAmounts\",\"type\":\"uint256[]\"}],\"name\":\"burnNFTs\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"metadata\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vaultShares\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"strategies\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"name\":\"burnVaultShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"nftIds\",\"type\":\"uint256[]\"}],\"name\":\"getMetadata\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"metadata\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"assets\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"initiated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flushIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct DepositMetadata\",\"name\":\"metadata\",\"type\":\"tuple\"}],\"name\":\"mintDepositNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vaultShares\",\"type\":\"uint256\"}],\"name\":\"mintVaultShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"vaultShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flushIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct WithdrawalMetadata\",\"name\":\"metadata\",\"type\":\"tuple\"}],\"name\":\"mintWithdrawalNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFromSpender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"assetGroupId()\":{\"returns\":{\"id\":\"ID of the asset group.\"}},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"balanceOf(address,uint256)\":{\"details\":\"Returns the amount of tokens of token type `id` owned by `account`. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length.\"},\"balanceOfFractional(address,uint256)\":{\"params\":{\"account\":\"Account to check the balance for.\",\"id\":\"ID of the NFT to check.\"},\"returns\":{\"fractionalBalance\":\"Fractional balance of account for the NFT.\"}},\"balanceOfFractionalBatch(address,uint256[])\":{\"params\":{\"account\":\"Account to check the balance for.\",\"ids\":\"IDs of the NFTs to check.\"},\"returns\":{\"fractionalBalances\":\"Fractional balances of account for each requested NFT.\"}},\"burnNFTs(address,uint256[],uint256[])\":{\"details\":\"Requirements: - caller must have role ROLE_SMART_VAULT_MANAGER\",\"params\":{\"nftAmounts\":\"NFT shares to burn (partial burn).\",\"nftIds\":\"IDs of NFTs to burn.\",\"owner\":\"Owner of NFTs to burn.\"},\"returns\":{\"metadata\":\"Metadata for each burned NFT.\"}},\"burnVaultShares(address,uint256,address[],uint256[])\":{\"details\":\"Requirements: - caller must have role ROLE_SMART_VAULT_MANAGER\",\"params\":{\"owner\":\"Address for which to burn the tokens.\",\"shares\":\"Amounts of strategy shares to release.\",\"strategies\":\"Strategies for which to release the strategy shares.\",\"vaultShares\":\"Amount of tokens to burn.\"}},\"claimShares(address,uint256)\":{\"details\":\"Requirements: - caller must have role ROLE_SMART_VAULT_MANAGER\",\"params\":{\"amount\":\"Amount of shares to transfer.\",\"claimer\":\"Address that claims the shares.\"}},\"getMetadata(uint256[])\":{\"params\":{\"nftIds\":\"IDs of NFTs.\"},\"returns\":{\"metadata\":\"Metadata for each requested NFT.\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Returns true if `operator` is approved to transfer ``account``'s tokens. See {setApprovalForAll}.\"},\"mintDepositNFT(address,(uint256[],uint256,uint256))\":{\"details\":\"Supply of minted NFT is NFT_MINTED_SHARES (for partial burning). Requirements: - caller must have role ROLE_SMART_VAULT_MANAGER\",\"params\":{\"metadata\":\"Metadata to store for minted NFT.\",\"receiver\":\"Address that will receive the NFT.\"},\"returns\":{\"id\":\"ID of the minted NFT.\"}},\"mintVaultShares(address,uint256)\":{\"details\":\"Requirements: - caller must have role ROLE_SMART_VAULT_MANAGER\",\"params\":{\"receiver\":\"REceiver of minted tokens.\",\"vaultShares\":\"Amount of tokens to mint.\"}},\"mintWithdrawalNFT(address,(uint256,uint256))\":{\"details\":\"Supply of minted NFT is NFT_MINTED_SHARES (for partial burning). Requirements: - caller must have role ROLE_SMART_VAULT_MANAGER\",\"params\":{\"metadata\":\"Metadata to store for minted NFT.\",\"receiver\":\"Address that will receive the NFT.\"},\"returns\":{\"id\":\"ID of the minted NFT.\"}},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. Emits a {TransferBatch} event. Requirements: - `ids` and `amounts` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"Transfers `amount` tokens of token type `id` from `from` to `to`. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `amount`. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the caller.\"},\"setBaseURI(string)\":{\"params\":{\"uri_\":\"new base URI value\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFromSpender(address,address,uint256)\":{\"details\":\"Requirements: - caller must have role ROLE_SMART_VAULT_MANAGER\",\"params\":{\"amount\":\"Amount of tokens to transfer.\",\"from\":\"Spender and owner of tokens.\",\"to\":\"Address to which tokens will be transferred.\"},\"returns\":{\"success\":\"True if transfer was successful.\"}},\"uri(uint256)\":{\"details\":\"Returns the URI for token type `id`. If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by clients with the actual token type ID.\"},\"vaultName()\":{\"returns\":{\"name\":\"Name of the vault.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"BaseURIChanged(string)\":{\"notice\":\"Emitted when base URI is changed.\"}},\"kind\":\"user\",\"methods\":{\"assetGroupId()\":{\"notice\":\"Gets the asset group used by the smart vault.\"},\"balanceOfFractional(address,uint256)\":{\"notice\":\"Fractional balance of a NFT (0 - NFT_MINTED_SHARES).\"},\"balanceOfFractionalBatch(address,uint256[])\":{\"notice\":\"Fractional balance of a NFTs (0 - NFT_MINTED_SHARES).\"},\"burnNFTs(address,uint256[],uint256[])\":{\"notice\":\"Burns NFTs and returns their metadata. Allows for partial burning.\"},\"burnVaultShares(address,uint256,address[],uint256[])\":{\"notice\":\"Burns smart vault tokens and releases strategy shares back to strategies.\"},\"claimShares(address,uint256)\":{\"notice\":\"Transfers unclaimed shares to claimer.\"},\"getMetadata(uint256[])\":{\"notice\":\"Gets metadata for NFTs.\"},\"mintDepositNFT(address,(uint256[],uint256,uint256))\":{\"notice\":\"Mints a new deposit NFT.\"},\"mintVaultShares(address,uint256)\":{\"notice\":\"Mints smart vault tokens for receiver.\"},\"mintWithdrawalNFT(address,(uint256,uint256))\":{\"notice\":\"Mints a new withdrawal NFT.\"},\"setBaseURI(string)\":{\"notice\":\"Set a new base URI for ERC1155 metadata.\"},\"transferFromSpender(address,address,uint256)\":{\"notice\":\"Transfers smart vault tokens.\"},\"vaultName()\":{\"notice\":\"Gets the name of the smart vault.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/ISmartVault.sol\":\"ISmartVault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@prb/math/=lib/prb-math/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/\",\":prb-math/=lib/prb-math/src/\",\":solidity-stringutils/=lib/openzeppelin-foundry-upgrades/lib/solidity-stringutils/\"]},\"sources\":{\"src/interfaces/Constants.sol\":{\"keccak256\":\"0x14098998da750616c31e480b982f25c37d0cb60a1c7cebafe2d17b4670a41176\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://501f5aead8ee02766e81074fa96a2584006ce26c00a9d0881bd5217a7da209eb\",\"dweb:/ipfs/QmQMHVArLXpsqyTt4XBTef9d6wkYuRPJdizrpugkdYW4G2\"]},\"src/interfaces/IERC1155MetadataURIUpgradeable.sol\":{\"keccak256\":\"0x62d7d4155bf57a6f6a4d3e0c1440ab7fc4b9ad8362cd2742d63e7407ba37b025\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://62323e9ef7bb540b7510b5bb2612cbf03234ed91be7e34af4c3834e2431f679a\",\"dweb:/ipfs/QmaKda4NqgrX9ebw9nxwSpDAUoS5iYXR9a9AKygknoxnWg\"]},\"src/interfaces/IERC1155Upgradeable.sol\":{\"keccak256\":\"0xa1cf4a47b24f01053daa96f12d69b286f78944d5308051f3af480d2bed7d64c3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dbda5e13c955dc55963a5f7ce8ef17604b4bb35ae69b75e1550ea9d9b9ffd14e\",\"dweb:/ipfs/QmNMStubfavSKKsKJKjzXXY6FYQ69tRJdftFdq7jXtLrqE\"]},\"src/interfaces/IERC165Upgradeable.sol\":{\"keccak256\":\"0x781c3dfeacfed81d9f30ee1445f27a9c41f090ffbff6036e3f006f44281af864\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9c7b9a2b8260eb971740c8ce4e67b30699990804f5bb4c4e80584700df7838c7\",\"dweb:/ipfs/QmWwtgynBvZre8JP42EoxDmmujnFS3Eiejd9gNK8peUB1X\"]},\"src/interfaces/IERC20Upgradeable.sol\":{\"keccak256\":\"0x22fffb4f5262e1ae532edeaccdedc85e449af7b50754b4a1be4a6ecd170120c3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8581149cafbbec49bd361c3c50cf76d1f678644c7f87c66e66ba4a6efca5956c\",\"dweb:/ipfs/QmekQhe8dpzebJQBs5Ah13iHjdd1r8ysns7q3Ef8DGW6Lo\"]},\"src/interfaces/ISmartVault.sol\":{\"keccak256\":\"0xffc16686d0a28150aecd4811ed6d221f692f1897b5922561b1268a8a659eb19c\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://760fb247c4c5ee5d660299ddd43d0ab088d02d12c567d6e994f8b3080e5d75d1\",\"dweb:/ipfs/Qmcg1t7WvQ4TTyufhLKWDmRukcCDhpS5jfrxwCbQqGMJfP\"]},\"src/interfaces/RequestType.sol\":{\"keccak256\":\"0xbbaf3f2dc27061b50dcd5469de28a40796da8dd5b518e13b5e893c3860ce2ce4\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://7f366b76d388720de2dc37b57cda39b3e483dd649a21f11a9f37cc66b8ae0751\",\"dweb:/ipfs/QmTg3TDzM7zzKbWoYTeqEki7dDhEQNzD2kzDTunMbQfoy8\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.17+commit.8df45f5f"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"owner","type":"address","indexed":true},{"internalType":"address","name":"spender","type":"address","indexed":true},{"internalType":"uint256","name":"value","type":"uint256","indexed":false}],"type":"event","name":"Approval","anonymous":false},{"inputs":[{"internalType":"address","name":"account","type":"address","indexed":true},{"internalType":"address","name":"operator","type":"address","indexed":true},{"internalType":"bool","name":"approved","type":"bool","indexed":false}],"type":"event","name":"ApprovalForAll","anonymous":false},{"inputs":[{"internalType":"string","name":"baseUri","type":"string","indexed":false}],"type":"event","name":"BaseURIChanged","anonymous":false},{"inputs":[{"internalType":"address","name":"from","type":"address","indexed":true},{"internalType":"address","name":"to","type":"address","indexed":true},{"internalType":"uint256","name":"value","type":"uint256","indexed":false}],"type":"event","name":"Transfer","anonymous":false},{"inputs":[{"internalType":"address","name":"operator","type":"address","indexed":true},{"internalType":"address","name":"from","type":"address","indexed":true},{"internalType":"address","name":"to","type":"address","indexed":true},{"internalType":"uint256[]","name":"ids","type":"uint256[]","indexed":false},{"internalType":"uint256[]","name":"values","type":"uint256[]","indexed":false}],"type":"event","name":"TransferBatch","anonymous":false},{"inputs":[{"internalType":"address","name":"operator","type":"address","indexed":true},{"internalType":"address","name":"from","type":"address","indexed":true},{"internalType":"address","name":"to","type":"address","indexed":true},{"internalType":"uint256","name":"id","type":"uint256","indexed":false},{"internalType":"uint256","name":"value","type":"uint256","indexed":false}],"type":"event","name":"TransferSingle","anonymous":false},{"inputs":[{"internalType":"string","name":"value","type":"string","indexed":false},{"internalType":"uint256","name":"id","type":"uint256","indexed":true}],"type":"event","name":"URI","anonymous":false},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"stateMutability":"view","type":"function","name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"assetGroupId","outputs":[{"internalType":"uint256","name":"id","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"stateMutability":"view","type":"function","name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"stateMutability":"view","type":"function","name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"stateMutability":"view","type":"function","name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}]},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"stateMutability":"view","type":"function","name":"balanceOfFractional","outputs":[{"internalType":"uint256","name":"fractionalBalance","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"stateMutability":"view","type":"function","name":"balanceOfFractionalBatch","outputs":[{"internalType":"uint256[]","name":"fractionalBalances","type":"uint256[]"}]},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256[]","name":"nftIds","type":"uint256[]"},{"internalType":"uint256[]","name":"nftAmounts","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function","name":"burnNFTs","outputs":[{"internalType":"bytes[]","name":"metadata","type":"bytes[]"}]},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"vaultShares","type":"uint256"},{"internalType":"address[]","name":"strategies","type":"address[]"},{"internalType":"uint256[]","name":"shares","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function","name":"burnVaultShares"},{"inputs":[{"internalType":"address","name":"claimer","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"claimShares"},{"inputs":[{"internalType":"uint256[]","name":"nftIds","type":"uint256[]"}],"stateMutability":"view","type":"function","name":"getMetadata","outputs":[{"internalType":"bytes[]","name":"metadata","type":"bytes[]"}]},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function","name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"receiver","type":"address"},{"internalType":"struct DepositMetadata","name":"metadata","type":"tuple","components":[{"internalType":"uint256[]","name":"assets","type":"uint256[]"},{"internalType":"uint256","name":"initiated","type":"uint256"},{"internalType":"uint256","name":"flushIndex","type":"uint256"}]}],"stateMutability":"nonpayable","type":"function","name":"mintDepositNFT","outputs":[{"internalType":"uint256","name":"id","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"receiver","type":"address"},{"internalType":"uint256","name":"vaultShares","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"mintVaultShares"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"},{"internalType":"struct WithdrawalMetadata","name":"metadata","type":"tuple","components":[{"internalType":"uint256","name":"vaultShares","type":"uint256"},{"internalType":"uint256","name":"flushIndex","type":"uint256"}]}],"stateMutability":"nonpayable","type":"function","name":"mintWithdrawalNFT","outputs":[{"internalType":"uint256","name":"id","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"safeBatchTransferFrom"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"safeTransferFrom"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"stateMutability":"nonpayable","type":"function","name":"setApprovalForAll"},{"inputs":[{"internalType":"string","name":"uri_","type":"string"}],"stateMutability":"nonpayable","type":"function","name":"setBaseURI"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"stateMutability":"view","type":"function","name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"transferFromSpender","outputs":[{"internalType":"bool","name":"success","type":"bool"}]},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"stateMutability":"view","type":"function","name":"uri","outputs":[{"internalType":"string","name":"","type":"string"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"vaultName","outputs":[{"internalType":"string","name":"name","type":"string"}]}],"devdoc":{"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"assetGroupId()":{"returns":{"id":"ID of the asset group."}},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"balanceOf(address,uint256)":{"details":"Returns the amount of tokens of token type `id` owned by `account`. Requirements: - `account` cannot be the zero address."},"balanceOfBatch(address[],uint256[])":{"details":"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}. Requirements: - `accounts` and `ids` must have the same length."},"balanceOfFractional(address,uint256)":{"params":{"account":"Account to check the balance for.","id":"ID of the NFT to check."},"returns":{"fractionalBalance":"Fractional balance of account for the NFT."}},"balanceOfFractionalBatch(address,uint256[])":{"params":{"account":"Account to check the balance for.","ids":"IDs of the NFTs to check."},"returns":{"fractionalBalances":"Fractional balances of account for each requested NFT."}},"burnNFTs(address,uint256[],uint256[])":{"details":"Requirements: - caller must have role ROLE_SMART_VAULT_MANAGER","params":{"nftAmounts":"NFT shares to burn (partial burn).","nftIds":"IDs of NFTs to burn.","owner":"Owner of NFTs to burn."},"returns":{"metadata":"Metadata for each burned NFT."}},"burnVaultShares(address,uint256,address[],uint256[])":{"details":"Requirements: - caller must have role ROLE_SMART_VAULT_MANAGER","params":{"owner":"Address for which to burn the tokens.","shares":"Amounts of strategy shares to release.","strategies":"Strategies for which to release the strategy shares.","vaultShares":"Amount of tokens to burn."}},"claimShares(address,uint256)":{"details":"Requirements: - caller must have role ROLE_SMART_VAULT_MANAGER","params":{"amount":"Amount of shares to transfer.","claimer":"Address that claims the shares."}},"getMetadata(uint256[])":{"params":{"nftIds":"IDs of NFTs."},"returns":{"metadata":"Metadata for each requested NFT."}},"isApprovedForAll(address,address)":{"details":"Returns true if `operator` is approved to transfer ``account``'s tokens. See {setApprovalForAll}."},"mintDepositNFT(address,(uint256[],uint256,uint256))":{"details":"Supply of minted NFT is NFT_MINTED_SHARES (for partial burning). Requirements: - caller must have role ROLE_SMART_VAULT_MANAGER","params":{"metadata":"Metadata to store for minted NFT.","receiver":"Address that will receive the NFT."},"returns":{"id":"ID of the minted NFT."}},"mintVaultShares(address,uint256)":{"details":"Requirements: - caller must have role ROLE_SMART_VAULT_MANAGER","params":{"receiver":"REceiver of minted tokens.","vaultShares":"Amount of tokens to mint."}},"mintWithdrawalNFT(address,(uint256,uint256))":{"details":"Supply of minted NFT is NFT_MINTED_SHARES (for partial burning). Requirements: - caller must have role ROLE_SMART_VAULT_MANAGER","params":{"metadata":"Metadata to store for minted NFT.","receiver":"Address that will receive the NFT."},"returns":{"id":"ID of the minted NFT."}},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"details":"xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}. Emits a {TransferBatch} event. Requirements: - `ids` and `amounts` must have the same length. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value."},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"details":"Transfers `amount` tokens of token type `id` from `from` to `to`. Emits a {TransferSingle} event. Requirements: - `to` cannot be the zero address. - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}. - `from` must have a balance of tokens of type `id` of at least `amount`. - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the acceptance magic value."},"setApprovalForAll(address,bool)":{"details":"Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`, Emits an {ApprovalForAll} event. Requirements: - `operator` cannot be the caller."},"setBaseURI(string)":{"params":{"uri_":"new base URI value"}},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFromSpender(address,address,uint256)":{"details":"Requirements: - caller must have role ROLE_SMART_VAULT_MANAGER","params":{"amount":"Amount of tokens to transfer.","from":"Spender and owner of tokens.","to":"Address to which tokens will be transferred."},"returns":{"success":"True if transfer was successful."}},"uri(uint256)":{"details":"Returns the URI for token type `id`. If the `\\{id\\}` substring is present in the URI, it must be replaced by clients with the actual token type ID."},"vaultName()":{"returns":{"name":"Name of the vault."}}},"version":1},"userdoc":{"kind":"user","methods":{"assetGroupId()":{"notice":"Gets the asset group used by the smart vault."},"balanceOfFractional(address,uint256)":{"notice":"Fractional balance of a NFT (0 - NFT_MINTED_SHARES)."},"balanceOfFractionalBatch(address,uint256[])":{"notice":"Fractional balance of a NFTs (0 - NFT_MINTED_SHARES)."},"burnNFTs(address,uint256[],uint256[])":{"notice":"Burns NFTs and returns their metadata. Allows for partial burning."},"burnVaultShares(address,uint256,address[],uint256[])":{"notice":"Burns smart vault tokens and releases strategy shares back to strategies."},"claimShares(address,uint256)":{"notice":"Transfers unclaimed shares to claimer."},"getMetadata(uint256[])":{"notice":"Gets metadata for NFTs."},"mintDepositNFT(address,(uint256[],uint256,uint256))":{"notice":"Mints a new deposit NFT."},"mintVaultShares(address,uint256)":{"notice":"Mints smart vault tokens for receiver."},"mintWithdrawalNFT(address,(uint256,uint256))":{"notice":"Mints a new withdrawal NFT."},"setBaseURI(string)":{"notice":"Set a new base URI for ERC1155 metadata."},"transferFromSpender(address,address,uint256)":{"notice":"Transfers smart vault tokens."},"vaultName()":{"notice":"Gets the name of the smart vault."}},"version":1}},"settings":{"remappings":["@openzeppelin-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@prb/math/=lib/prb-math/","ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/","prb-math/=lib/prb-math/src/","solidity-stringutils/=lib/openzeppelin-foundry-upgrades/lib/solidity-stringutils/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/interfaces/ISmartVault.sol":"ISmartVault"},"evmVersion":"london","libraries":{}},"sources":{"src/interfaces/Constants.sol":{"keccak256":"0x14098998da750616c31e480b982f25c37d0cb60a1c7cebafe2d17b4670a41176","urls":["bzz-raw://501f5aead8ee02766e81074fa96a2584006ce26c00a9d0881bd5217a7da209eb","dweb:/ipfs/QmQMHVArLXpsqyTt4XBTef9d6wkYuRPJdizrpugkdYW4G2"],"license":"BUSL-1.1"},"src/interfaces/IERC1155MetadataURIUpgradeable.sol":{"keccak256":"0x62d7d4155bf57a6f6a4d3e0c1440ab7fc4b9ad8362cd2742d63e7407ba37b025","urls":["bzz-raw://62323e9ef7bb540b7510b5bb2612cbf03234ed91be7e34af4c3834e2431f679a","dweb:/ipfs/QmaKda4NqgrX9ebw9nxwSpDAUoS5iYXR9a9AKygknoxnWg"],"license":"MIT"},"src/interfaces/IERC1155Upgradeable.sol":{"keccak256":"0xa1cf4a47b24f01053daa96f12d69b286f78944d5308051f3af480d2bed7d64c3","urls":["bzz-raw://dbda5e13c955dc55963a5f7ce8ef17604b4bb35ae69b75e1550ea9d9b9ffd14e","dweb:/ipfs/QmNMStubfavSKKsKJKjzXXY6FYQ69tRJdftFdq7jXtLrqE"],"license":"MIT"},"src/interfaces/IERC165Upgradeable.sol":{"keccak256":"0x781c3dfeacfed81d9f30ee1445f27a9c41f090ffbff6036e3f006f44281af864","urls":["bzz-raw://9c7b9a2b8260eb971740c8ce4e67b30699990804f5bb4c4e80584700df7838c7","dweb:/ipfs/QmWwtgynBvZre8JP42EoxDmmujnFS3Eiejd9gNK8peUB1X"],"license":"MIT"},"src/interfaces/IERC20Upgradeable.sol":{"keccak256":"0x22fffb4f5262e1ae532edeaccdedc85e449af7b50754b4a1be4a6ecd170120c3","urls":["bzz-raw://8581149cafbbec49bd361c3c50cf76d1f678644c7f87c66e66ba4a6efca5956c","dweb:/ipfs/QmekQhe8dpzebJQBs5Ah13iHjdd1r8ysns7q3Ef8DGW6Lo"],"license":"MIT"},"src/interfaces/ISmartVault.sol":{"keccak256":"0xffc16686d0a28150aecd4811ed6d221f692f1897b5922561b1268a8a659eb19c","urls":["bzz-raw://760fb247c4c5ee5d660299ddd43d0ab088d02d12c567d6e994f8b3080e5d75d1","dweb:/ipfs/Qmcg1t7WvQ4TTyufhLKWDmRukcCDhpS5jfrxwCbQqGMJfP"],"license":"BUSL-1.1"},"src/interfaces/RequestType.sol":{"keccak256":"0xbbaf3f2dc27061b50dcd5469de28a40796da8dd5b518e13b5e893c3860ce2ce4","urls":["bzz-raw://7f366b76d388720de2dc37b57cda39b3e483dd649a21f11a9f37cc66b8ae0751","dweb:/ipfs/QmTg3TDzM7zzKbWoYTeqEki7dDhEQNzD2kzDTunMbQfoy8"],"license":"BUSL-1.1"}},"version":1},"storageLayout":{"storage":[],"types":{}},"ast":{"absolutePath":"src/interfaces/ISmartVault.sol","id":2259,"exportedSymbols":{"DEPOSIT_FEE_MAX":[590],"DepositIdOverflow":[2073],"DepositMetadata":[2107],"ECOSYSTEM_FEE_MAX":[598],"FULL_PERCENT":[565],"FULL_PERCENT_INT":[569],"IERC1155MetadataURIUpgradeable":[1121],"IERC1155Upgradeable":[1284],"IERC165Upgradeable":[1296],"IERC20Upgradeable":[1452],"INITIAL_LOCKED_SHARES":[668],"INITIAL_LOCKED_SHARES_ADDRESS":[675],"INITIAL_SHARE_MULTIPLIER":[662],"ISmartVault":[2258],"InvalidDepositNftId":[2081],"InvalidNftBalance":[2091],"InvalidNftTransferAmount":[2096],"InvalidWithdrawalNftId":[2086],"MANAGEMENT_FEE_MAX":[586],"MAXIMAL_DEPOSIT_ID":[636],"MAXIMAL_WITHDRAWAL_ID":[644],"MAX_ACTION_COUNT":[683],"MAX_DHW_BASE_YIELD_LIMIT":[658],"MAX_GUARD_COUNT":[679],"MAX_RISK_SCORE":[606],"MAX_RISK_TOLERANCE":[614],"MIN_RISK_SCORE":[610],"MIN_RISK_TOLERANCE":[619],"NFT_MINTED_SHARES":[650],"NULL_ASSET_GROUP_ID":[687],"RequestType":[2912],"SECONDS_IN_YEAR":[557],"SECONDS_IN_YEAR_INT":[561],"STATIC_RISK_PROVIDER":[626],"STATIC_RISK_SCORE":[630],"STRATEGY_COUNT_CAP":[654],"SV_PERFORMANCE_FEE_MAX":[594],"SenderEqualsRecipient":[2099],"SmartVaultFees":[2119],"TREASURY_FEE_MAX":[602],"WithdrawalIdOverflow":[2076],"WithdrawalMetadata":[2112],"YIELD_FULL_PERCENT":[582],"YIELD_FULL_PERCENT_INT":[575]},"nodeType":"SourceUnit","src":"37:7231:16","nodes":[{"id":2065,"nodeType":"PragmaDirective","src":"37:23:16","nodes":[],"literals":["solidity","0.8",".17"]},{"id":2066,"nodeType":"ImportDirective","src":"62:35:16","nodes":[],"absolutePath":"src/interfaces/IERC1155Upgradeable.sol","file":"./IERC1155Upgradeable.sol","nameLocation":"-1:-1:-1","scope":2259,"sourceUnit":1285,"symbolAliases":[],"unitAlias":""},{"id":2067,"nodeType":"ImportDirective","src":"98:33:16","nodes":[],"absolutePath":"src/interfaces/IERC20Upgradeable.sol","file":"./IERC20Upgradeable.sol","nameLocation":"-1:-1:-1","scope":2259,"sourceUnit":1453,"symbolAliases":[],"unitAlias":""},{"id":2068,"nodeType":"ImportDirective","src":"132:46:16","nodes":[],"absolutePath":"src/interfaces/IERC1155MetadataURIUpgradeable.sol","file":"./IERC1155MetadataURIUpgradeable.sol","nameLocation":"-1:-1:-1","scope":2259,"sourceUnit":1122,"symbolAliases":[],"unitAlias":""},{"id":2069,"nodeType":"ImportDirective","src":"179:25:16","nodes":[],"absolutePath":"src/interfaces/Constants.sol","file":"./Constants.sol","nameLocation":"-1:-1:-1","scope":2259,"sourceUnit":688,"symbolAliases":[],"unitAlias":""},{"id":2070,"nodeType":"ImportDirective","src":"205:27:16","nodes":[],"absolutePath":"src/interfaces/RequestType.sol","file":"./RequestType.sol","nameLocation":"-1:-1:-1","scope":2259,"sourceUnit":2913,"symbolAliases":[],"unitAlias":""},{"id":2073,"nodeType":"ErrorDefinition","src":"363:26:16","nodes":[],"documentation":{"id":2071,"nodeType":"StructuredDocumentation","src":"270:92:16","text":" @notice Used when the ID for deposit NFTs overflows.\n @dev Should never happen."},"errorSelector":"839261c9","name":"DepositIdOverflow","nameLocation":"369:17:16","parameters":{"id":2072,"nodeType":"ParameterList","parameters":[],"src":"386:2:16"}},{"id":2076,"nodeType":"ErrorDefinition","src":"487:29:16","nodes":[],"documentation":{"id":2074,"nodeType":"StructuredDocumentation","src":"391:95:16","text":" @notice Used when the ID for withdrawal NFTs overflows.\n @dev Should never happen."},"errorSelector":"f8bac3d1","name":"WithdrawalIdOverflow","nameLocation":"493:20:16","parameters":{"id":2075,"nodeType":"ParameterList","parameters":[],"src":"513:2:16"}},{"id":2081,"nodeType":"ErrorDefinition","src":"635:48:16","nodes":[],"documentation":{"id":2077,"nodeType":"StructuredDocumentation","src":"518:116:16","text":" @notice Used when ID does not represent a deposit NFT.\n @param depositNftId Invalid ID for deposit NFT."},"errorSelector":"cf77dbd8","name":"InvalidDepositNftId","nameLocation":"641:19:16","parameters":{"id":2080,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2079,"mutability":"mutable","name":"depositNftId","nameLocation":"669:12:16","nodeType":"VariableDeclaration","scope":2081,"src":"661:20:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2078,"name":"uint256","nodeType":"ElementaryTypeName","src":"661:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"660:22:16"}},{"id":2086,"nodeType":"ErrorDefinition","src":"811:54:16","nodes":[],"documentation":{"id":2082,"nodeType":"StructuredDocumentation","src":"685:125:16","text":" @notice Used when ID does not represent a withdrawal NFT.\n @param withdrawalNftId Invalid ID for withdrawal NFT."},"errorSelector":"5a904393","name":"InvalidWithdrawalNftId","nameLocation":"817:22:16","parameters":{"id":2085,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2084,"mutability":"mutable","name":"withdrawalNftId","nameLocation":"848:15:16","nodeType":"VariableDeclaration","scope":2086,"src":"840:23:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2083,"name":"uint256","nodeType":"ElementaryTypeName","src":"840:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"839:25:16"}},{"id":2091,"nodeType":"ErrorDefinition","src":"972:41:16","nodes":[],"documentation":{"id":2087,"nodeType":"StructuredDocumentation","src":"867:104:16","text":" @notice Used when balance of the NFT is invalid.\n @param balance Actual balance of the NFT."},"errorSelector":"e5e171ad","name":"InvalidNftBalance","nameLocation":"978:17:16","parameters":{"id":2090,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2089,"mutability":"mutable","name":"balance","nameLocation":"1004:7:16","nodeType":"VariableDeclaration","scope":2091,"src":"996:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2088,"name":"uint256","nodeType":"ElementaryTypeName","src":"996:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"995:17:16"}},{"id":2096,"nodeType":"ErrorDefinition","src":"1168:55:16","nodes":[],"documentation":{"id":2092,"nodeType":"StructuredDocumentation","src":"1015:152:16","text":" @notice Used when someone wants to transfer invalid NFT shares amount.\n @param transferAmount Amount of shares requested to be transferred."},"errorSelector":"d53d8d0b","name":"InvalidNftTransferAmount","nameLocation":"1174:24:16","parameters":{"id":2095,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2094,"mutability":"mutable","name":"transferAmount","nameLocation":"1207:14:16","nodeType":"VariableDeclaration","scope":2096,"src":"1199:22:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2093,"name":"uint256","nodeType":"ElementaryTypeName","src":"1199:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1198:24:16"}},{"id":2099,"nodeType":"ErrorDefinition","src":"1292:30:16","nodes":[],"documentation":{"id":2097,"nodeType":"StructuredDocumentation","src":"1225:66:16","text":" @notice Used when user tries to send tokens to himself."},"errorSelector":"bc6284b2","name":"SenderEqualsRecipient","nameLocation":"1298:21:16","parameters":{"id":2098,"nodeType":"ParameterList","parameters":[],"src":"1319:2:16"}},{"id":2107,"nodeType":"StructDefinition","src":"1361:95:16","nodes":[],"canonicalName":"DepositMetadata","members":[{"constant":false,"id":2102,"mutability":"mutable","name":"assets","nameLocation":"1400:6:16","nodeType":"VariableDeclaration","scope":2107,"src":"1390:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2100,"name":"uint256","nodeType":"ElementaryTypeName","src":"1390:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2101,"nodeType":"ArrayTypeName","src":"1390:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2104,"mutability":"mutable","name":"initiated","nameLocation":"1420:9:16","nodeType":"VariableDeclaration","scope":2107,"src":"1412:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2103,"name":"uint256","nodeType":"ElementaryTypeName","src":"1412:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2106,"mutability":"mutable","name":"flushIndex","nameLocation":"1443:10:16","nodeType":"VariableDeclaration","scope":2107,"src":"1435:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2105,"name":"uint256","nodeType":"ElementaryTypeName","src":"1435:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"DepositMetadata","nameLocation":"1368:15:16","scope":2259,"visibility":"public"},{"id":2112,"nodeType":"StructDefinition","src":"1663:78:16","nodes":[],"canonicalName":"WithdrawalMetadata","members":[{"constant":false,"id":2109,"mutability":"mutable","name":"vaultShares","nameLocation":"1703:11:16","nodeType":"VariableDeclaration","scope":2112,"src":"1695:19:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2108,"name":"uint256","nodeType":"ElementaryTypeName","src":"1695:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2111,"mutability":"mutable","name":"flushIndex","nameLocation":"1728:10:16","nodeType":"VariableDeclaration","scope":2112,"src":"1720:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2110,"name":"uint256","nodeType":"ElementaryTypeName","src":"1720:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"WithdrawalMetadata","nameLocation":"1670:18:16","scope":2259,"visibility":"public"},{"id":2119,"nodeType":"StructDefinition","src":"2007:110:16","nodes":[],"canonicalName":"SmartVaultFees","members":[{"constant":false,"id":2114,"mutability":"mutable","name":"managementFeePct","nameLocation":"2042:16:16","nodeType":"VariableDeclaration","scope":2119,"src":"2035:23:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":2113,"name":"uint16","nodeType":"ElementaryTypeName","src":"2035:6:16","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":2116,"mutability":"mutable","name":"depositFeePct","nameLocation":"2071:13:16","nodeType":"VariableDeclaration","scope":2119,"src":"2064:20:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":2115,"name":"uint16","nodeType":"ElementaryTypeName","src":"2064:6:16","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":2118,"mutability":"mutable","name":"performanceFeePct","nameLocation":"2097:17:16","nodeType":"VariableDeclaration","scope":2119,"src":"2090:24:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":2117,"name":"uint16","nodeType":"ElementaryTypeName","src":"2090:6:16","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"}],"name":"SmartVaultFees","nameLocation":"2014:14:16","scope":2259,"visibility":"public"},{"id":2258,"nodeType":"ContractDefinition","src":"2159:5109:16","nodes":[{"id":2133,"nodeType":"FunctionDefinition","src":"2554:108:16","nodes":[],"documentation":{"id":2124,"nodeType":"StructuredDocumentation","src":"2297:252:16","text":" @notice Fractional balance of a NFT (0 - NFT_MINTED_SHARES).\n @param account Account to check the balance for.\n @param id ID of the NFT to check.\n @return fractionalBalance Fractional balance of account for the NFT."},"functionSelector":"5d9c84ee","implemented":false,"kind":"function","modifiers":[],"name":"balanceOfFractional","nameLocation":"2563:19:16","parameters":{"id":2129,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2126,"mutability":"mutable","name":"account","nameLocation":"2591:7:16","nodeType":"VariableDeclaration","scope":2133,"src":"2583:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2125,"name":"address","nodeType":"ElementaryTypeName","src":"2583:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2128,"mutability":"mutable","name":"id","nameLocation":"2608:2:16","nodeType":"VariableDeclaration","scope":2133,"src":"2600:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2127,"name":"uint256","nodeType":"ElementaryTypeName","src":"2600:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2582:29:16"},"returnParameters":{"id":2132,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2131,"mutability":"mutable","name":"fractionalBalance","nameLocation":"2643:17:16","nodeType":"VariableDeclaration","scope":2133,"src":"2635:25:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2130,"name":"uint256","nodeType":"ElementaryTypeName","src":"2635:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2634:27:16"},"scope":2258,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":2145,"nodeType":"FunctionDefinition","src":"2942:159:16","nodes":[],"documentation":{"id":2134,"nodeType":"StructuredDocumentation","src":"2668:269:16","text":" @notice Fractional balance of a NFTs (0 - NFT_MINTED_SHARES).\n @param account Account to check the balance for.\n @param ids IDs of the NFTs to check.\n @return fractionalBalances Fractional balances of account for each requested NFT."},"functionSelector":"539183e7","implemented":false,"kind":"function","modifiers":[],"name":"balanceOfFractionalBatch","nameLocation":"2951:24:16","parameters":{"id":2140,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2136,"mutability":"mutable","name":"account","nameLocation":"2984:7:16","nodeType":"VariableDeclaration","scope":2145,"src":"2976:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2135,"name":"address","nodeType":"ElementaryTypeName","src":"2976:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2139,"mutability":"mutable","name":"ids","nameLocation":"3012:3:16","nodeType":"VariableDeclaration","scope":2145,"src":"2993:22:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2137,"name":"uint256","nodeType":"ElementaryTypeName","src":"2993:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2138,"nodeType":"ArrayTypeName","src":"2993:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2975:41:16"},"returnParameters":{"id":2144,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2143,"mutability":"mutable","name":"fractionalBalances","nameLocation":"3081:18:16","nodeType":"VariableDeclaration","scope":2145,"src":"3064:35:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2141,"name":"uint256","nodeType":"ElementaryTypeName","src":"3064:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2142,"nodeType":"ArrayTypeName","src":"3064:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"3063:37:16"},"scope":2258,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":2151,"nodeType":"FunctionDefinition","src":"3224:59:16","nodes":[],"documentation":{"id":2146,"nodeType":"StructuredDocumentation","src":"3106:113:16","text":" @notice Gets the asset group used by the smart vault.\n @return id ID of the asset group."},"functionSelector":"84ba89e3","implemented":false,"kind":"function","modifiers":[],"name":"assetGroupId","nameLocation":"3233:12:16","parameters":{"id":2147,"nodeType":"ParameterList","parameters":[],"src":"3245:2:16"},"returnParameters":{"id":2150,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2149,"mutability":"mutable","name":"id","nameLocation":"3279:2:16","nodeType":"VariableDeclaration","scope":2151,"src":"3271:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2148,"name":"uint256","nodeType":"ElementaryTypeName","src":"3271:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3270:12:16"},"scope":2258,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":2157,"nodeType":"FunctionDefinition","src":"3393:64:16","nodes":[],"documentation":{"id":2152,"nodeType":"StructuredDocumentation","src":"3289:99:16","text":" @notice Gets the name of the smart vault.\n @return name Name of the vault."},"functionSelector":"0ace9ca0","implemented":false,"kind":"function","modifiers":[],"name":"vaultName","nameLocation":"3402:9:16","parameters":{"id":2153,"nodeType":"ParameterList","parameters":[],"src":"3411:2:16"},"returnParameters":{"id":2156,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2155,"mutability":"mutable","name":"name","nameLocation":"3451:4:16","nodeType":"VariableDeclaration","scope":2157,"src":"3437:18:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2154,"name":"string","nodeType":"ElementaryTypeName","src":"3437:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3436:20:16"},"scope":2258,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":2167,"nodeType":"FunctionDefinition","src":"3609:96:16","nodes":[],"documentation":{"id":2158,"nodeType":"StructuredDocumentation","src":"3463:141:16","text":" @notice Gets metadata for NFTs.\n @param nftIds IDs of NFTs.\n @return metadata Metadata for each requested NFT."},"functionSelector":"a7614d81","implemented":false,"kind":"function","modifiers":[],"name":"getMetadata","nameLocation":"3618:11:16","parameters":{"id":2162,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2161,"mutability":"mutable","name":"nftIds","nameLocation":"3649:6:16","nodeType":"VariableDeclaration","scope":2167,"src":"3630:25:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2159,"name":"uint256","nodeType":"ElementaryTypeName","src":"3630:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2160,"nodeType":"ArrayTypeName","src":"3630:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"3629:27:16"},"returnParameters":{"id":2166,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2165,"mutability":"mutable","name":"metadata","nameLocation":"3695:8:16","nodeType":"VariableDeclaration","scope":2167,"src":"3680:23:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":2163,"name":"bytes","nodeType":"ElementaryTypeName","src":"3680:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":2164,"nodeType":"ArrayTypeName","src":"3680:7:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"3679:25:16"},"scope":2258,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":2173,"nodeType":"FunctionDefinition","src":"3882:49:16","nodes":[],"documentation":{"id":2168,"nodeType":"StructuredDocumentation","src":"3772:105:16","text":" @notice Set a new base URI for ERC1155 metadata.\n @param uri_ new base URI value"},"functionSelector":"55f804b3","implemented":false,"kind":"function","modifiers":[],"name":"setBaseURI","nameLocation":"3891:10:16","parameters":{"id":2171,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2170,"mutability":"mutable","name":"uri_","nameLocation":"3916:4:16","nodeType":"VariableDeclaration","scope":2173,"src":"3902:18:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2169,"name":"string","nodeType":"ElementaryTypeName","src":"3902:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3901:20:16"},"returnParameters":{"id":2172,"nodeType":"ParameterList","parameters":[],"src":"3930:0:16"},"scope":2258,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":2181,"nodeType":"FunctionDefinition","src":"4191:73:16","nodes":[],"documentation":{"id":2174,"nodeType":"StructuredDocumentation","src":"3937:249:16","text":" @notice Mints smart vault tokens for receiver.\n @dev Requirements:\n - caller must have role ROLE_SMART_VAULT_MANAGER\n @param receiver REceiver of minted tokens.\n @param vaultShares Amount of tokens to mint."},"functionSelector":"f20046a8","implemented":false,"kind":"function","modifiers":[],"name":"mintVaultShares","nameLocation":"4200:15:16","parameters":{"id":2179,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2176,"mutability":"mutable","name":"receiver","nameLocation":"4224:8:16","nodeType":"VariableDeclaration","scope":2181,"src":"4216:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2175,"name":"address","nodeType":"ElementaryTypeName","src":"4216:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2178,"mutability":"mutable","name":"vaultShares","nameLocation":"4242:11:16","nodeType":"VariableDeclaration","scope":2181,"src":"4234:19:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2177,"name":"uint256","nodeType":"ElementaryTypeName","src":"4234:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4215:39:16"},"returnParameters":{"id":2180,"nodeType":"ParameterList","parameters":[],"src":"4263:0:16"},"scope":2258,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":2195,"nodeType":"FunctionDefinition","src":"4705:166:16","nodes":[],"documentation":{"id":2182,"nodeType":"StructuredDocumentation","src":"4270:430:16","text":" @notice Burns smart vault tokens and releases strategy shares back to strategies.\n @dev Requirements:\n - caller must have role ROLE_SMART_VAULT_MANAGER\n @param owner Address for which to burn the tokens.\n @param vaultShares Amount of tokens to burn.\n @param strategies Strategies for which to release the strategy shares.\n @param shares Amounts of strategy shares to release."},"functionSelector":"e2281e0a","implemented":false,"kind":"function","modifiers":[],"name":"burnVaultShares","nameLocation":"4714:15:16","parameters":{"id":2193,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2184,"mutability":"mutable","name":"owner","nameLocation":"4747:5:16","nodeType":"VariableDeclaration","scope":2195,"src":"4739:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2183,"name":"address","nodeType":"ElementaryTypeName","src":"4739:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2186,"mutability":"mutable","name":"vaultShares","nameLocation":"4770:11:16","nodeType":"VariableDeclaration","scope":2195,"src":"4762:19:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2185,"name":"uint256","nodeType":"ElementaryTypeName","src":"4762:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2189,"mutability":"mutable","name":"strategies","nameLocation":"4810:10:16","nodeType":"VariableDeclaration","scope":2195,"src":"4791:29:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2187,"name":"address","nodeType":"ElementaryTypeName","src":"4791:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2188,"nodeType":"ArrayTypeName","src":"4791:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":2192,"mutability":"mutable","name":"shares","nameLocation":"4849:6:16","nodeType":"VariableDeclaration","scope":2195,"src":"4830:25:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2190,"name":"uint256","nodeType":"ElementaryTypeName","src":"4830:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2191,"nodeType":"ArrayTypeName","src":"4830:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"4729:132:16"},"returnParameters":{"id":2194,"nodeType":"ParameterList","parameters":[],"src":"4870:0:16"},"scope":2258,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":2206,"nodeType":"FunctionDefinition","src":"5245:113:16","nodes":[],"documentation":{"id":2196,"nodeType":"StructuredDocumentation","src":"4877:363:16","text":" @notice Mints a new withdrawal NFT.\n @dev Supply of minted NFT is NFT_MINTED_SHARES (for partial burning).\n Requirements:\n - caller must have role ROLE_SMART_VAULT_MANAGER\n @param receiver Address that will receive the NFT.\n @param metadata Metadata to store for minted NFT.\n @return id ID of the minted NFT."},"functionSelector":"56ba9454","implemented":false,"kind":"function","modifiers":[],"name":"mintWithdrawalNFT","nameLocation":"5254:17:16","parameters":{"id":2202,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2198,"mutability":"mutable","name":"receiver","nameLocation":"5280:8:16","nodeType":"VariableDeclaration","scope":2206,"src":"5272:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2197,"name":"address","nodeType":"ElementaryTypeName","src":"5272:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2201,"mutability":"mutable","name":"metadata","nameLocation":"5318:8:16","nodeType":"VariableDeclaration","scope":2206,"src":"5290:36:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawalMetadata_$2112_calldata_ptr","typeString":"struct WithdrawalMetadata"},"typeName":{"id":2200,"nodeType":"UserDefinedTypeName","pathNode":{"id":2199,"name":"WithdrawalMetadata","nameLocations":["5290:18:16"],"nodeType":"IdentifierPath","referencedDeclaration":2112,"src":"5290:18:16"},"referencedDeclaration":2112,"src":"5290:18:16","typeDescriptions":{"typeIdentifier":"t_struct$_WithdrawalMetadata_$2112_storage_ptr","typeString":"struct WithdrawalMetadata"}},"visibility":"internal"}],"src":"5271:56:16"},"returnParameters":{"id":2205,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2204,"mutability":"mutable","name":"id","nameLocation":"5354:2:16","nodeType":"VariableDeclaration","scope":2206,"src":"5346:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2203,"name":"uint256","nodeType":"ElementaryTypeName","src":"5346:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5345:12:16"},"scope":2258,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":2217,"nodeType":"FunctionDefinition","src":"5729:107:16","nodes":[],"documentation":{"id":2207,"nodeType":"StructuredDocumentation","src":"5364:360:16","text":" @notice Mints a new deposit NFT.\n @dev Supply of minted NFT is NFT_MINTED_SHARES (for partial burning).\n Requirements:\n - caller must have role ROLE_SMART_VAULT_MANAGER\n @param receiver Address that will receive the NFT.\n @param metadata Metadata to store for minted NFT.\n @return id ID of the minted NFT."},"functionSelector":"b4316087","implemented":false,"kind":"function","modifiers":[],"name":"mintDepositNFT","nameLocation":"5738:14:16","parameters":{"id":2213,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2209,"mutability":"mutable","name":"receiver","nameLocation":"5761:8:16","nodeType":"VariableDeclaration","scope":2217,"src":"5753:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2208,"name":"address","nodeType":"ElementaryTypeName","src":"5753:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2212,"mutability":"mutable","name":"metadata","nameLocation":"5796:8:16","nodeType":"VariableDeclaration","scope":2217,"src":"5771:33:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_DepositMetadata_$2107_calldata_ptr","typeString":"struct DepositMetadata"},"typeName":{"id":2211,"nodeType":"UserDefinedTypeName","pathNode":{"id":2210,"name":"DepositMetadata","nameLocations":["5771:15:16"],"nodeType":"IdentifierPath","referencedDeclaration":2107,"src":"5771:15:16"},"referencedDeclaration":2107,"src":"5771:15:16","typeDescriptions":{"typeIdentifier":"t_struct$_DepositMetadata_$2107_storage_ptr","typeString":"struct DepositMetadata"}},"visibility":"internal"}],"src":"5752:53:16"},"returnParameters":{"id":2216,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2215,"mutability":"mutable","name":"id","nameLocation":"5832:2:16","nodeType":"VariableDeclaration","scope":2217,"src":"5824:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2214,"name":"uint256","nodeType":"ElementaryTypeName","src":"5824:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5823:12:16"},"scope":2258,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":2232,"nodeType":"FunctionDefinition","src":"6228:150:16","nodes":[],"documentation":{"id":2218,"nodeType":"StructuredDocumentation","src":"5842:381:16","text":" @notice Burns NFTs and returns their metadata.\n Allows for partial burning.\n @dev Requirements:\n - caller must have role ROLE_SMART_VAULT_MANAGER\n @param owner Owner of NFTs to burn.\n @param nftIds IDs of NFTs to burn.\n @param nftAmounts NFT shares to burn (partial burn).\n @return metadata Metadata for each burned NFT."},"functionSelector":"a99fb771","implemented":false,"kind":"function","modifiers":[],"name":"burnNFTs","nameLocation":"6237:8:16","parameters":{"id":2227,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2220,"mutability":"mutable","name":"owner","nameLocation":"6254:5:16","nodeType":"VariableDeclaration","scope":2232,"src":"6246:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2219,"name":"address","nodeType":"ElementaryTypeName","src":"6246:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2223,"mutability":"mutable","name":"nftIds","nameLocation":"6280:6:16","nodeType":"VariableDeclaration","scope":2232,"src":"6261:25:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2221,"name":"uint256","nodeType":"ElementaryTypeName","src":"6261:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2222,"nodeType":"ArrayTypeName","src":"6261:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2226,"mutability":"mutable","name":"nftAmounts","nameLocation":"6307:10:16","nodeType":"VariableDeclaration","scope":2232,"src":"6288:29:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2224,"name":"uint256","nodeType":"ElementaryTypeName","src":"6288:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2225,"nodeType":"ArrayTypeName","src":"6288:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"6245:73:16"},"returnParameters":{"id":2231,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2230,"mutability":"mutable","name":"metadata","nameLocation":"6368:8:16","nodeType":"VariableDeclaration","scope":2232,"src":"6353:23:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":2228,"name":"bytes","nodeType":"ElementaryTypeName","src":"6353:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":2229,"nodeType":"ArrayTypeName","src":"6353:7:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"6352:25:16"},"scope":2258,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":2244,"nodeType":"FunctionDefinition","src":"6744:103:16","nodes":[],"documentation":{"id":2233,"nodeType":"StructuredDocumentation","src":"6384:355:16","text":" @notice Transfers smart vault tokens.\n @dev Requirements:\n - caller must have role ROLE_SMART_VAULT_MANAGER\n @param from Spender and owner of tokens.\n @param to Address to which tokens will be transferred.\n @param amount Amount of tokens to transfer.\n @return success True if transfer was successful."},"functionSelector":"2acf4637","implemented":false,"kind":"function","modifiers":[],"name":"transferFromSpender","nameLocation":"6753:19:16","parameters":{"id":2240,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2235,"mutability":"mutable","name":"from","nameLocation":"6781:4:16","nodeType":"VariableDeclaration","scope":2244,"src":"6773:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2234,"name":"address","nodeType":"ElementaryTypeName","src":"6773:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2237,"mutability":"mutable","name":"to","nameLocation":"6795:2:16","nodeType":"VariableDeclaration","scope":2244,"src":"6787:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2236,"name":"address","nodeType":"ElementaryTypeName","src":"6787:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2239,"mutability":"mutable","name":"amount","nameLocation":"6807:6:16","nodeType":"VariableDeclaration","scope":2244,"src":"6799:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2238,"name":"uint256","nodeType":"ElementaryTypeName","src":"6799:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6772:42:16"},"returnParameters":{"id":2243,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2242,"mutability":"mutable","name":"success","nameLocation":"6838:7:16","nodeType":"VariableDeclaration","scope":2244,"src":"6833:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2241,"name":"bool","nodeType":"ElementaryTypeName","src":"6833:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6832:14:16"},"scope":2258,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":2252,"nodeType":"FunctionDefinition","src":"7110:63:16","nodes":[],"documentation":{"id":2245,"nodeType":"StructuredDocumentation","src":"6853:252:16","text":" @notice Transfers unclaimed shares to claimer.\n @dev Requirements:\n - caller must have role ROLE_SMART_VAULT_MANAGER\n @param claimer Address that claims the shares.\n @param amount Amount of shares to transfer."},"functionSelector":"2ce5183f","implemented":false,"kind":"function","modifiers":[],"name":"claimShares","nameLocation":"7119:11:16","parameters":{"id":2250,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2247,"mutability":"mutable","name":"claimer","nameLocation":"7139:7:16","nodeType":"VariableDeclaration","scope":2252,"src":"7131:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2246,"name":"address","nodeType":"ElementaryTypeName","src":"7131:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2249,"mutability":"mutable","name":"amount","nameLocation":"7156:6:16","nodeType":"VariableDeclaration","scope":2252,"src":"7148:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2248,"name":"uint256","nodeType":"ElementaryTypeName","src":"7148:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7130:33:16"},"returnParameters":{"id":2251,"nodeType":"ParameterList","parameters":[],"src":"7172:0:16"},"scope":2258,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":2257,"nodeType":"EventDefinition","src":"7229:37:16","nodes":[],"anonymous":false,"documentation":{"id":2253,"nodeType":"StructuredDocumentation","src":"7179:45:16","text":"@notice Emitted when base URI is changed."},"eventSelector":"5411e8ebf1636d9e83d5fc4900bf80cbac82e8790da2a4c94db4895e889eedf6","name":"BaseURIChanged","nameLocation":"7235:14:16","parameters":{"id":2256,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2255,"indexed":false,"mutability":"mutable","name":"baseUri","nameLocation":"7257:7:16","nodeType":"VariableDeclaration","scope":2257,"src":"7250:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2254,"name":"string","nodeType":"ElementaryTypeName","src":"7250:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7249:16:16"}}],"abstract":false,"baseContracts":[{"baseName":{"id":2120,"name":"IERC20Upgradeable","nameLocations":["2184:17:16"],"nodeType":"IdentifierPath","referencedDeclaration":1452,"src":"2184:17:16"},"id":2121,"nodeType":"InheritanceSpecifier","src":"2184:17:16"},{"baseName":{"id":2122,"name":"IERC1155MetadataURIUpgradeable","nameLocations":["2203:30:16"],"nodeType":"IdentifierPath","referencedDeclaration":1121,"src":"2203:30:16"},"id":2123,"nodeType":"InheritanceSpecifier","src":"2203:30:16"}],"canonicalName":"ISmartVault","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"linearizedBaseContracts":[2258,1121,1284,1296,1452],"name":"ISmartVault","nameLocation":"2169:11:16","scope":2259,"usedErrors":[]}],"license":"BUSL-1.1"},"id":16}